# Note: There is no way to manage users through the GraphQL schema.
# The GraphQL schema only permits you to log in, continue a session
# and log out.

"""
Represents a user session. User sessions can be obtained by using the `logIn` or
`resumeSession` mutation. The `username` field is meant for use in UIs, such as
to show who the user is logged in as. The `sessionId` is the unique identifier
for the session.
"""
type UserSession {
  "The ID of the session. Use this value to resume the session later."
  sessionId: ID!
  "The name of the user this session applies to."
  username: String!
  """
  The date and time that the session expires. After this point, the user must
  log in again to make changes to the dictionary.
  """
  expiresAt: Date!
}

"Represents a failed login attempt."
type FailedLogin {
  "The reason for the failed login."
  reason: LoginFailureReason!
}

"Describes why a login failed."
enum LoginFailureReason {
  "The user could not be found."
  USER_NOT_FOUND

  "The password did not match."
  PASSWORD_MISMATCH
}

"Represents the result of a login attempt."
union LoginResult = UserSession | FailedLogin

extend type Mutation {
  "Attempts to log in on the server using the specified username and password."
  logIn(username: String!, password: String!): LoginResult

  """
  Logs out of the current session. Returns true if the session was terminated,
  false if there is no current session.
  """
  logOut: Boolean

  """
  Tries to resume the current session. If the session exists and has not
  expired, the expiry date is updated and the session data is returned. If
  the current session ID refers to an expired or invalid session, null is
  returned, and the user must log in again to edit the dictionary.
  """
  resumeSession: UserSession
}
