"Represents a language ID."
scalar LanguageId @id

"Determines how to filter lemmas."
enum LemmaFilter {
  "All lemmas are included in the result."
  ALL_LEMMAS

  """
  Include only lemmas that have at least one own definition (that is, where
  `Lemma.definitions` is not the empty list).
  """
  DEFINED_LEMMAS_ONLY

  """
  Include only lemmas that have at least one derived definition (that is, where
  `Lemma.derivedDefinitions` is not the empty list).
  """
  DERIVED_LEMMAS_ONLY
}

"""
The language is the root of the dictionary. Everything else in the dictionary
belongs, directly or indirectly, to a language. A dictionary can contain any
number of languages.

A language contains:

* Parts of speech (see `PartOfSpeech`), which words can be associated with.
* Lemmas (see `Lemma`), which are basically the words of the dictionary. Each
  lemma can contain any number of definitions (see `Definition`).

In addition, every language has a (unique) name.
"""
type Language {
  "The globally unique ID of the language."
  id: LanguageId!

  "The display name of the language."
  name: String!

  "Formatted text that provides a description of the language"
  description: [BlockElement!]!

  """
  A raw JSON string equivalent of `description`. Generally, you should avoid
  using this field; prefer `description` whenever possible.
  """
  descriptionRaw: String!

  "The parts of speech that belong to this language."
  partsOfSpeech: [PartOfSpeech!]!

  "The total number of lemmas in the dictionary."
  lemmaCount: Int!

  """
  The lemmas defined in the dictionary. Since a language usually contains many
  lemmas, this field is always paginated. If provided, `page.perPage` cannot
  exceed 200.
  """
  lemmas(
    page: PageParams
    filter: LemmaFilter = ALL_LEMMAS
  ): LemmaConnection!

  """
  The tags used by this language. Since a language may use many tags, this field
  is always paginated. If provided, `page.perPage` cannot exceed 200.
  """
  tags(page: PageParams): TagConnection!
}

"Contains paginated results from the `Language.lemmas` field."
type LemmaConnection {
  "Pagination metadata for this batch."
  page: PageInfo!

  "The lemmas in this batch."
  nodes: [Lemma!]!
}

extend type Query {
  "Lists all languages in the dictionary."
  languages: [Language!]!

  "Finds a language by ID."
  language(id: LanguageId!): Language
}

"Input type for a new language."
input NewLanguageInput {
  "The display name of the language."
  name: String!

  """
  Formatted text that provides a description of the language. If omitted or
  null, the language has no description.
  """
  description: [BlockElementInput!]
}

"Input type for editing an existing language."
input EditLanguageInput {
  "If set, updates the display name of the language."
  name: String

  "If set, updates the language's description."
  description: [BlockElementInput!]
}

extend type Mutation {
  """
  Adds a language.

  Requires authentication.
  """
  addLanguage(data: NewLanguageInput!): Language!

  """
  Edits a language.

  Requires authentication.
  """
  editLanguage(id: LanguageId!, data: EditLanguageInput!): Language!
}
