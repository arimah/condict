"Represents a language ID."
scalar LanguageId @id

"Determines how to filter lemmas."
enum LemmaFilter {
  "All lemmas are included in the result."
  ALL_LEMMAS

  """
  Include only lemmas that have at least one own definition (that is, where
  `Lemma.definitions` is not the empty list).
  """
  DEFINED_LEMMAS_ONLY

  """
  Include only lemmas that have at least one derived definition (that is, where
  `Lemma.derivedDefinitions` is not the empty list).
  """
  DERIVED_LEMMAS_ONLY
}

"""
The language is the root of the dictionary. Everything else in the dictionary
belongs, directly or indirectly, to a language. A dictionary can contain any
number of languages.

A language contains:

* Parts of speech (see `PartOfSpeech`), which words can be associated with.
* Lemmas (see `Lemma`), which are basically the words of the dictionary. Each
  lemma can contain any number of definitions (see `Definition`).

In addition, every language has a (unique) name.
"""
type Language {
  "The globally unique ID of the language."
  id: LanguageId!

  "The display name of the language."
  name: String!

  "Formatted text that provides a description of the language"
  description: [BlockElement!]!

  """
  A raw JSON string equivalent of `description`. Generally, you should avoid
  using this field; prefer `description` whenever possible.
  """
  descriptionRaw: String!

  "The parts of speech that belong to this language."
  partsOfSpeech: [PartOfSpeech!]!

  "The total number of lemmas in the dictionary."
  lemmaCount: Int!

  """
  The lemmas defined in the dictionary. Since a language usually contains many
  lemmas, this field is always paginated. If provided, `page.perPage` cannot
  exceed 200.
  """
  lemmas(
    page: PageParams
    filter: LemmaFilter = ALL_LEMMAS
  ): LemmaConnection!

  """
  The tags used by this language. Since a language may use many tags, this field
  is always paginated. If provided, `page.perPage` cannot exceed 200.
  """
  tags(page: PageParams): TagConnection!

  """
  Searches the language. This field behaves like `Query.search` with an implicit
  language filter. See that field for more documentation and examples.

  The following are equivalent:

  ```graphql
  query($language: LanguageId!) {
    language(id: $language) {
      # This search:
      search(params: {
        query: "foo"
      }) {
        ...
      }
    }

    # is equivalent to:
    search(params: {
      query: "foo"
      inLanguages: [$language]
    }) {
      ...
    }
  }
  ```

  But note that `Language.search` returns a different type that includes only
  those resources that are searchable in languages.
  """
  search(
    params: SearchInLanguageParams!
    page: PageParams
  ): SearchInLanguageResultConnection
}

"Contains paginated results from the `Language.lemmas` field."
type LemmaConnection {
  "Pagination metadata for this batch."
  page: PageInfo!

  "The lemmas in this batch."
  nodes: [Lemma!]!
}

"Contains paginated results from the `Language.search` field."
type SearchInLanguageResultConnection {
  "Pagination metadata for this batch."
  page: PageInfo!

  "The search results in this batch."
  nodes: [SearchInLanguageResult!]!
}

"The result of a search within a language (the `Language.search` field)."
union SearchInLanguageResult =
  | LemmaSearchResult
  | DefinitionSearchResult
  | PartOfSpeechSearchResult

"""
Contains search parameters for the `Language.search` field. See that field for
more documentation and examples.
"""
input SearchInLanguageParams {
  "The free text search query."
  query: String!

  """
  The scopes to search within. This specifies the kinds of resources that will
  be included in the search. Others filters may additionally limit the search
  scope. For example, a part of speech filter will further constrain the search
  to resources that have to a part of speech.

  The values `SEARCH_LANGUAGES` and `SEARCH_TAGS` are not valid for language
  searches. Passing either into this list is an error.

  If omitted or null, all scopes are searched. If empty, no scopes are searched;
  the result will be empty.
  """
  scopes: [SearchScope!]

  """
  The IDs of parts of speech to search in. This limits the search to resources
  that have a part of speech (lemmas and definitions). Notably, this *excludes*
  parts of speech themselves.

  A definition matches if it belongs to *any* of the specified parts of speech.
  A lemma matches if *any* of its definitions match.

  If omitted or null, no part of speech filter is applied. If empty, no parts
  of speech are searched; the result will be empty.
  """
  inPartsOfSpeech: [PartOfSpeechId!]

  """
  The IDs of tags to search in. This limits the search to resources that have
  tags (lemmas and definitions). Notably, this *excludes* tags themselves.

  The value of `tagMatching` determines how these values are used:

  * If `tagMatching` is `MATCH_ANY`, then: a definition matches if it has *any*
    of the specified tags, and a lemma matches if *any* of its definitions
    match. In this mode, an empty list means no tags are searched; the result
    will be empty.
  * If `tagMatching` is `MATCH_ALL`, then: a definition matches if it has *all*
    of the specified tags, and a lemma matches if its definitions together have
    *all* of the speciifed tags. In this mode, an empty list means all lemmas
    and definitions match (`[]` is a subset of every list).

  If omitted or null, no tag filter is applied.
  """
  withTags: [TagId!]

  """
  Determines how `withTags` matches. See the documentation of `withTags` for
  more details. If omitted or null, the default value is `MATCH_ANY`.

  This field has no effect if `withTags` is omitted or null.
  """
  tagMatching: MatchingMode
}

extend type Query {
  "Lists all languages in the dictionary."
  languages: [Language!]!

  "Finds a language by ID."
  language(id: LanguageId!): Language
}

"Input type for a new language."
input NewLanguageInput {
  "The display name of the language."
  name: String!

  """
  Formatted text that provides a description of the language. If omitted or
  null, the language has no description.
  """
  description: [BlockElementInput!]
}

"Input type for editing an existing language."
input EditLanguageInput {
  "If set, updates the display name of the language."
  name: String

  "If set, updates the language's description."
  description: [BlockElementInput!]
}

extend type Mutation {
  """
  Adds a language.

  Requires authentication.
  """
  addLanguage(data: NewLanguageInput!): Language

  """
  Edits a language.

  Requires authentication.
  """
  editLanguage(id: LanguageId!, data: EditLanguageInput!): Language
}
