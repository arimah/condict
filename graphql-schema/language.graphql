"Represents a language ID."
scalar LanguageId @id

"Contains filtering options for lemmas."
input LemmaFilter {
  """
  Determines which kind of lemmas to include. See the `LemmaKind` enum for
  details.
  """
  kind: LemmaKind = ALL_LEMMAS

  """
  If specified, restricts the lemma list to lemmas where a definition belongs
  to one of the given parts of speech.

  For direct definitions (those in `Lemma.definitions`), the lemma matches if
  at least one definition belongs to one of the specified parts of speech. For
  derived definitions (in `Lemma.derivedDefinitions`), the lemma matches if
  the derived definition comes from an original definition of the specified
  part of speech.

  If this parameter is the empty list, no lemmas are returned.
  """
  inPartsOfSpeech: [PartOfSpeechId!]

  """
  If specified, restricts the lemma list to lemmas where a definition uses one
  of the given inflection tables.

  For direct definitions (those in `Lemma.definitions`), the lemma matches if
  at least one definition uses one of the specified inflection tables. For
  derived definitions (in `Lemma.derivedDefinitions`), the lemma matches if
  the derived definition comes from an inflected form in one of the specified
  tables.

  If this parameter is the empty list, no lemmas are returned.
  """
  inflectsLike: [InflectionTableId!]

  """
  If specified, restricts the lemma list to lemmas where a definition contains
  any or all (depending on `tagMatching`) of the given tags.

  The value of `tagMatching` determines how these values are used:

  * If `tagMatching` is `MATCH_ANY`, then a lemma is included if one of its
    definitions has *any* of the specified tags. In this mode, an empty list
    means nothing matches; the lemma list will be empty.
  * If `tagMatching` is `MATCH_ALL`, then a lemma is included if one of its
    definitions taken together have *all* of the specified tags. In this mode,
    an empty list means all lemmas match (`[]` is a subset of every list).

  When filtering by tag, only direct definitions (those in `Lemma.definitions`)
  are considered. Derived definitions (in `Lemma.derivedDefinitions`) are not
  included in the search.

  Note: if tags are specified and `kind` is `DERIVED_LEMMAS_ONLY`, the lemma
  list will be empty.

  If omitted or null, no tag filter is applied.
  """
  withTags: [TagId!]

  """
  Determines how `withTags` matches. See the documentation of `withTags` for
  more details. If omitted or null, the default value is `MATCH_ANY`.

  This field has no effect if `withTags` is omitted or null.
  """
  tagMatching: MatchingMode
}

"Determines which kind of lemmas to include."
enum LemmaKind {
  "All lemmas are included in the result."
  ALL_LEMMAS

  """
  Include only lemmas that have at least one own definition (that is, where
  `Lemma.definitions` is not the empty list).
  """
  DEFINED_LEMMAS_ONLY

  """
  Include only lemmas that have at least one derived definition (that is, where
  `Lemma.derivedDefinitions` is not the empty list).
  """
  DERIVED_LEMMAS_ONLY
}

"""
The language is the root of the dictionary. Everything else in the dictionary
belongs, directly or indirectly, to a language. A dictionary can contain any
number of languages.

A language contains:

* Parts of speech (see `PartOfSpeech`), which words can be associated with.
* Inflection tables (see `InflectionTable`), which specifies how definitions
  inflect.
* Lemmas (see `Lemma`), which are basically the words of the dictionary. Each
  lemma can contain any number of definitions (see `Definition`). Lemmas should
  have been called _headwords_.

In addition, every language has a (unique) name, an optional description, and
various metadata.
"""
type Language implements RecentItem {
  "The globally unique ID of the language."
  id: LanguageId!

  "The display name of the language."
  name: String!

  "Formatted text that provides a description of the language"
  description: [BlockElement!]!

  """
  A raw JSON string equivalent of `description`. Generally, you should avoid
  using this field; prefer `description` whenever possible.
  """
  descriptionRaw: String!

  "The parts of speech that belong to this language."
  partsOfSpeech: [PartOfSpeech!]!

  "Finds a part of speech by name."
  partOfSpeechByName(name: String!): PartOfSpeech

  "The inflection tables that belong to this language."
  inflectionTables: [InflectionTable!]!

  "Finds an inflection table by name."
  inflectionTableByName(name: String!): InflectionTable

  "The total number of lemmas in the dictionary."
  lemmaCount: Int!

  """
  The lemmas defined in the dictionary. Since a language usually contains many
  lemmas, this field is always paginated. If provided, `page.perPage` cannot
  exceed 500.
  """
  lemmas(page: PageParams, filter: LemmaFilter): LemmaConnection!

  """
  The first lemma in the language, ordered alphabetically. If the language has
  no lemmas, this field is null.
  """
  firstLemma: Lemma

  """
  The last lemma in the language, ordered alphabetically. If the language has no
  lemmas, this field is null.
  """
  lastLemma: Lemma

  """
  The tags used by this language. Since a language may use many tags, this field
  is always paginated. If provided, `page.perPage` cannot exceed 200.
  """
  tags(page: PageParams): TagConnection!

  """
  Lists recently changed definitions. The results can be sorted by creation date
  or by last update/edit date.

  The `order` parameter determines the sort order. If omitted or null, defaults
  to MOST_RECENTLY_UPDATED.

  Since a language may contain many definitions, this field is always paginated.
  If provided, `page.perPage` cannot exceed 100.
  """
  recentDefinitions(
    page: PageParams
    order: RecentItemOrder
  ): DefinitionConnection!

  """
  Searches the language. This field behaves like `Query.search` with an implicit
  language filter. See that field for more documentation and examples.

  The following are equivalent:

  ```graphql
  query($language: LanguageId!) {
    language(id: $language) {
      # This search:
      search(params: {
        query: "foo"
      }) {
        ...
      }
    }

    # is equivalent to:
    search(params: {
      query: "foo"
      inLanguages: [$language]
    }) {
      ...
    }
  }
  ```

  But note that `Language.search` returns a different type that includes only
  those resources that are searchable in languages.
  """
  search(
    params: SearchInLanguageParams!
    page: PageParams
  ): SearchInLanguageResultConnection

  "The time that the language was created."
  timeCreated: UtcInstant!

  """
  The time of the most recent update to the language. This time coers updates
  performed on the language itself, but not on any of its subresources (such as
  parts of speech, inflection tables or definitions).
  """
  timeUpdated: UtcInstant!

  "Assorted statistics about the language."
  statistics: LanguageStats!
}

"Contains paginated results from the `Language.lemmas` field."
type LemmaConnection {
  "Pagination metadata for this batch."
  page: PageInfo!

  "The lemmas in this batch."
  nodes: [Lemma!]!
}

"Contains paginated results from the `Language.search` field."
type SearchInLanguageResultConnection {
  "Pagination metadata for this batch."
  page: PageInfo!

  "The search results in this batch."
  nodes: [SearchInLanguageResult!]!
}

"The result of a search within a language (the `Language.search` field)."
union SearchInLanguageResult =
  | LemmaSearchResult
  | DefinitionSearchResult
  | PartOfSpeechSearchResult

"Contains statistics about a language."
type LanguageStats {
  "The total number of lemmas in the language."
  lemmaCount: Int!

  "The total number of (non-derived) definitions in the language."
  definitionCount: Int!

  "The number of parts of speech in the language."
  partOfSpeechCount: Int!

  "The number of unique tags used by definitions in the language."
  tagCount: Int!
}

"""
Contains search parameters for the `Language.search` field. See that field for
more documentation and examples.
"""
input SearchInLanguageParams {
  "The free text search query."
  query: String!

  """
  The scopes to search within. This specifies the kinds of resources that will
  be included in the search. Others filters may additionally limit the search
  scope. For example, a part of speech filter will further constrain the search
  to resources that have to a part of speech.

  The values `SEARCH_LANGUAGES` and `SEARCH_TAGS` are not valid for language
  searches. Passing either into this list is an error.

  If omitted or null, all scopes are searched. If empty, no scopes are searched;
  the result will be empty.
  """
  scopes: [SearchScope!]

  """
  The IDs of parts of speech to search in. This limits the search to resources
  that have a part of speech (lemmas and definitions). Notably, this *excludes*
  parts of speech themselves.

  A definition matches if it belongs to *any* of the specified parts of speech.
  A lemma matches if *any* of its definitions match.

  If omitted or null, no part of speech filter is applied. If empty, no parts
  of speech are searched; the result will be empty.
  """
  inPartsOfSpeech: [PartOfSpeechId!]

  """
  The IDs of tags to search in. This limits the search to resources that have
  tags (lemmas and definitions). Notably, this *excludes* tags themselves.

  The value of `tagMatching` determines how these values are used:

  * If `tagMatching` is `MATCH_ANY`, then: a definition matches if it has *any*
    of the specified tags, and a lemma matches if *any* of its definitions
    match. In this mode, an empty list means no tags are searched; the result
    will be empty.
  * If `tagMatching` is `MATCH_ALL`, then: a definition matches if it has *all*
    of the specified tags, and a lemma matches if its definitions together have
    *all* of the speciifed tags. In this mode, an empty list means all lemmas
    and definitions match (`[]` is a subset of every list).

  If omitted or null, no tag filter is applied.
  """
  withTags: [TagId!]

  """
  Determines how `withTags` matches. See the documentation of `withTags` for
  more details. If omitted or null, the default value is `MATCH_ANY`.

  This field has no effect if `withTags` is omitted or null.
  """
  tagMatching: MatchingMode
}

extend type Query {
  "Lists all languages in the dictionary."
  languages: [Language!]!

  "Finds a language by ID."
  language(id: LanguageId!): Language

  "Finds a language by name."
  languageByName(name: String!): Language
}

"Input type for a new language."
input NewLanguageInput {
  "The display name of the language."
  name: String!

  """
  Formatted text that provides a description of the language. If omitted or
  null, the language has no description.
  """
  description: [BlockElementInput!]
}

"Input type for editing an existing language."
input EditLanguageInput {
  "If set, updates the display name of the language."
  name: String

  "If set, updates the language's description."
  description: [BlockElementInput!]
}

extend type Mutation {
  """
  Adds a language.

  Requires authentication.
  """
  addLanguage(data: NewLanguageInput!): Language

  """
  Edits a language.

  Requires authentication.
  """
  editLanguage(id: LanguageId!, data: EditLanguageInput!): Language

  """
  Deletes a language.

  Requires authentication.
  """
  deleteLanguage(id: LanguageId!): Boolean
}
