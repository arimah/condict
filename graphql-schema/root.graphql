# The root schema contains various essential types and definitions.

"""
Describes a scalar type as containing an ID, and defines what type of resource
the ID refers to. The ID is a numeric value, and is turned into that on the
server. For compatibility with the built-in `ID` type, the server also accepts
string values for these IDs.

The parameter `of` defines the type of resource that the ID refers to. Two IDs
are eqiuvalent in TypeScript if they refer to the same type of resource. If
omitted, it will be set to the scalar type's name, minus the `Id` suffix.

Without this directive, a custom scalar value will be typed as `unknown`.
"""
directive @id(of: String) on SCALAR

schema {
  query: Query
  mutation: Mutation
}

"The root query type."
type Query

"The root mutation type."
type Mutation

"Contains metadata about a paginated collection."
type ConnectionMeta {
  "The 0-based page number. This value is always greater than or equal to 0."
  page: Int!

  "The total number of items per page. This value is always at least 1."
  perPage: Int!

  """
  The total number of items in the paginated collection. This value is always
  greater than or equal to 0.
  """
  totalCount: Int!

  "Determines whether there are more items in the collection."
  hasNext: Boolean!

  """
  Determines whether there are items on earlier pages. This value is true if
  and only if \`page\` is greater than zero.
  """
  hasPrev: Boolean!
}

"Input type for pagination parameters."
input PageParams {
  "The 0-based page number. This value cannot be less than 0."
  page: Int!

  """
  The total number of items per page. This value cannot be less than 1. Each
  field defines its own upper limit.
  """
  perPage: Int!
}
