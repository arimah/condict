"""
Describes a scalar type as containing an ID, and defines what type of resource
the ID refers to. The ID is a numeric value, and is turned into that on the
server. For compatibility with the built-in `ID` type, the server also accepts
string values for these IDs.

The parameter `of` defines the type of resource that the ID refers to. Two IDs
are eqiuvalent in TypeScript if they refer to the same type of resource. If
omitted, it will be set to the scalar type's name, minus the `Id` suffix.

Without this directive or `@marshal`, a custom scalar value will be typed as
`unknown`.
"""
directive @id(of: String) on SCALAR

"""
Represents the marshalling type of a custom scalar. See the docuemtnation of
the `@marshal` directive.
"""
enum MarshalType {
  """
  The type is marshalled as an integer. In the JSON payload, it is a numeric
  value with no fractional component. In queries, the type accepts integer
  literals. The TypeScript representation is `number`.
  """
  INT_TYPE
  """
  The type is marshalled as a floating-point value. In the JSON payload, it is
  a numeric value with an optional fractional component. In queries, the type
  accepts integer and floating-point literals. The TypeScript representation
  is `number`.
  """
  FLOAT_TYPE
  """
  The type is marshalled as a string value. In the JSON payload, it is a string.
  In queries, the type accepts string literals. The TypeScript representation
  is `string`.
  """
  STRING_TYPE
}

"""
Determines how a custom scalar is marshalled. This affects how the type is
transferred in JSON payloads, decides what literals the server will accept
as values of the type, and is used by the GraphQL type generator to choose
an appropriate TypeScript representation.

Without this directive or `@id`, a custom scalar will be typed as `unknown`.
"""
directive @marshal(as: MarshalType!) on SCALAR

"""
When placed on a object type field of an enum type, informs the GraphQL type
generator that the server can only respond with a subset of the enum type's
values. This allows the enum field to be used as the discriminant in TS when
the `__typename` field is not selected.

There are two ways to use this directive:

1. The `only` parameter accepts a list of permitted enum values, as string
   containing the names of the enum values.
2. The `not` parameter accepts a list of _disallowed_ enum values. This is of
   course equivalent to listing every enum value except the ones in the list,
   and is provided for convenience.

You must specify exactly one of these parameters.

Without this directive, a field of an enum type is permitted to contain any
value of the enum. This directive is only applicable to fields inside object
types. It is ignored on interface types and input types, where all values are
presumed to be permitted.

This directive is only used by the GraphQL type generator and is ignored by
the server and the client alike.
"""
directive @restrict(only: [String!], not: [String!]) on FIELD_DEFINITION
