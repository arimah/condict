"Represents a field ID."
scalar FieldId @id

"""
A field contains some data about a definition. A field can contain anything
the user wants. Noun class, verb class, gender, inflection type, telicity,
pronunciation key, obsolete, and so on. The user has full control over the
field's name and possible values.

Fields can also be restricted by part of speech, such that some fields are
only visible on certain parts of speech. For example, it may only make sense
for nouns to have a noun class.

In addition to custom fields encapsulated by this type, definitions have a
few non-configurable built-in fields, including the description and the part
of speech. These cannot be enumerated in the same way as custom fields.
"""
type Field {
  "The globally unique ID of the field."
  id: FieldId!

  "The display name of the field."
  name: String!

  """
  An abbreviated version of the field's `name`. If this is the empty string,
  then the field has no abbreviated name.
  """
  nameAbbr: String!

  """
  The type of the field's value, which determines what data can be stored in
  the field once attached to a definition.
  """
  valueType: FieldValueType!

  """
  The possible values the field can take, if the field is of a list type
  (`FIELD_LIST_ONE`, `FIELD_LIST_MANY`). For other field types, this value is
  always null.
  """
  listValues: [FieldValue!]

  """
  The parts of speech that the field can be added to. If this value is null,
  then the field can be added to definitions of any part of speech. Note that
  the empty list means the field cannot be added to any definition. The empty
  list can only result from previously selected parts of speech being deleted;
  it is not possible to explicitly set a field filter to the empty list.

  Newly added parts of speech will *not* be automatically added to this list,
  even if the field selects all parts of speech. Fields are universal *only*
  if this value is null.
  """
  partsOfSpeech: [PartOfSpeech!]

  "The language that the field belongs to."
  language: Language!
}

"The type of a field's value."
enum FieldValueType {
  "The field contains a boolean value (on/off, true/false, yes/no)."
  FIELD_BOOLEAN

  "The field contains a single value selected from a list of values."
  FIELD_LIST_ONE

  "The field contains zero or more values selected from a list of values."
  FIELD_LIST_MANY

  "The field contains plain (unformatted) text."
  FIELD_PLAIN_TEXT
}

"Represents ID of a field value."
scalar FieldValueId @id

"""
A field value is one of a set of pre-defined options that can be assigned to
a definition. Only fields of a list type (`FIELD_LIST_ONE`, `FIELD_LIST_MANY`)
contain `FieldValue`s.
"""
type FieldValue {
  "The globally unique ID of the field value."
  id: FieldValueId!

  "The full field value text."
  value: String!

  """
  An abbreviated version of the `value`. If this is the empty string, then the
  field value has no abbreviated form.
  """
  valueAbbr: String!

  "The field that the value belongs to."
  field: Field!
}

"The result of `Mutation.validateFieldValues`. See that field for details."
type FieldValueValidity {
  "True if the set of field values is valid."
  valid: Boolean!

  """
  If validation failed, contains indices of values that were invalid. The list
  may be empty.

  If validation succeeded, this field is always null.
  """
  invalid: [Int!]

  """
  If validation failed, contains values occur more than once but are otherwise
  valid. The list may be empty.

  If validation succeeded, this field is always null.
  """
  duplicates: [FieldValueDuplicate!]
}

"A duplicated field value as returned by failed validation."
type FieldValueDuplicate {
  """
  The field value *after* normalization. Normalization at minimum involves
  trimming leading and trailing white space, but may include more steps in
  the future.
  """
  normalizedValue: String!

  """
  The indices of all occurrences of the value. Since normalization is performed
  on input values, `normalizedValue` may not match any item in the input, and
  this list of indices can be used to locate the inputs that failed validation.
  """
  indices: [Int!]!
}

"Input type for adding new fields."
input NewFieldInput {
  "The language that the field will be added to."
  languageId: LanguageId!

  "The name of the new field."
  name: String!

  """
  An abbreviated version of the field's `name`. If this is the empty string,
  then the field has no abbreviated name.
  """
  nameAbbr: String!

  "The type of the field's value."
  valueType: FieldValueType!

  """
  The field's values, for a list field. If the field is a list field, then this
  cannot be null; pass an empty list to create a field with no initial values.
  If the field is a non-list field, this value *must* be null.
  """
  listValues: [FieldValueInput!]

  """
  The parts of speech that this field can be used in. To mark a field as usable
  in any part of speech, even ones that are added in the future, pass the empty
  list. It is not possible to create a field that cannot be used in any part of
  speech.
  """
  partOfSpeechIds: [PartOfSpeechId!]!
}

"Input type for editing an existing field. The ID is a separate argument."
input EditFieldInput {
  "If set, updates the field's name."
  name: String

  "If set, updates the abbreviated version of the field's name."
  nameAbbr: String

  """
  If set, changes the field's value type.

  Changing a field's value type is permitted under the following circumstances:

  * If the current type is `FIELD_LIST_ONE` and the new type is `FIELD_LIST_MANY`,
    or vice versa, in which case no updates are performed on definitions with
    values for the field. When going from multi-select to single-select, note
    that existing assigned values are *not* affected, but when editing a
    definition with multiple values, extraneous values must be deselected.
  * In all other cases – when moving from boolean to non-boolean, list to
    non-list, text to non-text – the change is allowed only if there are no
    definitions using the field. This is to prevent confusion and complexity
    arising from having to decide what to do with existing values.
  """
  valueType: FieldValueType

  """
  If set, updates the field's values, for a list field. A list of field values
  is *required* if the field is changing to a list type; it cannot be null. If
  the field is not a list type, or is being changed to a non-list type, this
  value *must* be null.

  When editing the values of a list field, *all* of the field's values must be
  present here. Omitted values will be deleted.
  """
  listValues: [FieldValueInput!]

  """
  If set, updates the parts of speech that this field can be used in. To mark a
  field as usable in any part of speech, even ones that are added in the future,
  pass the empty list. It is not possible to create a field that cannot be used
  in any part of speech.
  """
  partOfSpeechIds: [PartOfSpeechId!]
}

"""
Input type for field values as edited through `addField` or `editField`.

Other input types for field values are:

* `NewFieldValueInput`, used by `addFieldValue`
* `EditFieldValueInput`, used by `editFieldValue`
"""
input FieldValueInput {
  """
  The ID of the field value. When editing a field value, set to an existing ID
  to indicate an update of that value. If null, represents a newly added field
  value. When adding a new field, the ID is ignored.
  """
  id: FieldValueId

  "The full field value text."
  value: String!

  """
  An abbreviated version of the `value`. If this is the empty string, then the
  field value has no abbreviated form.
  """
  valueAbbr: String!
}

"""
Input type for adding a new field value through `addFieldValue`.

Other input types for field values are:

* `FieldValueInput`, used in `NewFieldInput` and `EditFieldInput`
* `EditFieldValueInput`, used by `editFieldValue`
"""
input NewFieldValueInput {
  "The field to add the value to."
  fieldId: FieldId!

  "The full field value text."
  value: String!

  """
  An abbreviated version of the `value`. If this is the empty string, then the
  field value has no abbreviated form.
  """
  valueAbbr: String!
}

"""
Input type for editing an existing field value through `editFieldValue`. The ID
is a separate argument.

Other input types for field values are:

* `NewFieldValueInput`, used by `addFieldValue`
* `FieldValueInput`, used in `NewFieldInput` and `EditFieldInput`
"""
input EditFieldValueInput {
  "If set, updates the field value text."
  value: String

  """
  If set, updates the abbreviated version of the `value`. If this is the empty
  string, then the field value has no abbreviated form.
  """
  valueAbbr: String
}

extend type Query {
  field(id: FieldId!): Field

  fieldValue(id: FieldValueId!): FieldValue
}

extend type Mutation {
  """
  Adds a field to the dictionary.

  Requires authentication.
  """
  addField(data: NewFieldInput!): Field

  """
  Edits an existing field.

  Requires authentication.
  """
  editField(id: FieldId!, data: EditFieldInput!): Field

  """
  Deletes a field. This will delete all values associated with the field, as
  well as delete it from every definition that uses it.

  Requires authentication.
  """
  deleteField(id: FieldId!): Boolean

  """
  Validates a set of field values to find invalid values and duplicates. This
  mutation can be used for pre-validation before submitting field data for
  `addField` or `editField`.

  This mutation does not actually update the database.

  Requires authentication.
  """
  validateFieldValues(values: [String!]!): FieldValueValidity!

  """
  Adds a value to a list-type field.

  Requires authentication.
  """
  addFieldValue(data: NewFieldValueInput!): FieldValue

  """
  Edits an existing value of a list-type field.

  Requires authentication.
  """
  editFieldValue(id: FieldValueId!, data: EditFieldValueInput!): FieldValue

  """
  Deletes a value from a field. This will also delete the value from every
  definition that uses it.

  Requires authentication.
  """
  deleteFieldValue(id: FieldValueId!): Boolean
}
