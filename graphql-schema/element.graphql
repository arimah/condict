"The kind of a block element."
enum BlockKind {
  "A paragraph of text without any additional meaning."
  PARAGRAPH

  "A first-level heading."
  HEADING_1

  "A second-level heading."
  HEADING_2

  """
  An ordered list item. All consecutive ordered list items on the same level
  belong to the same list.
  """
  OLIST_ITEM

  """
  An unordered list item. All consecutive unordered list items on the same
  level belong to the same list.
  """
  ULIST_ITEM
}

"""
A block element. Block elements make up the top-level nodes of formatted text.
These include paragraphs, headings and list items.
"""
type BlockElement {
  "The block kind."
  kind: BlockKind!

  "The indentation level of the element, starting at 0."
  level: Int!

  "The text content of the block, without inline formatters."
  text: String!

  """
  A list of inlines, which determine how to format the block's text content.
  Inlines are ordered primarily by `start`, secondarily by `end`. If there are
  no inlines, this field is null.
  """
  inlines: [InlineElement!]
}

"The kind of an inline element."
enum InlineKind {
  "Bold text. The inline element is a `StyleInline`."
  BOLD

  "Italic text. The inline element is `StyleInline`."
  ITALIC

  "Underlined text. The inline element is `StyleInline`."
  UNDERLINE

  "Struck-through text. The inline element is `StyleInline`."
  STRIKETHROUGH

  "Superscript text. The inline element is `StyleInline`."
  SUPERSCRIPT

  "Subscript text. The inline element is `StyleInline`."
  SUBSCRIPT

  """
  A link, which can link to an item in the dictionary or to an arbitrary URI.
  The inline element is a `LinkInline`.
  """
  LINK
}

"""
An inline element. These appear as the children of block elements. Inlines have
no text of their own; instead, they refer to character offsets inside the text
content of the block.

The character offets of an inline element are true Unicode character offsets,
not byte offsets or UTF-16 code unit offsets.
"""
interface InlineElement {
  "The inline kind."
  kind: InlineKind!

  "The (inclusive) character offset at which the inline starts."
  start: Int!

  "The (exclusive) character offset at which the inline ends."
  end: Int!
}

"An `InlineElement` that applies a single style to its text."
type StyleInline implements InlineElement {
  "The inline kind."
  kind: InlineKind! @restrict(not: ["LINK"])

  "The (inclusive) character offset at which the inline starts."
  start: Int!

  "The (exclusive) character offset at which the inline ends."
  end: Int!
}

"""
An `InlineElement` that represents a link, either to an item in the dictionary,
or to an arbitrary external URI.
"""
type LinkInline implements InlineElement {
  "The inline kind."
  kind: InlineKind! @restrict(only: ["LINK"])

  "The (inclusive) character offset at which the inline starts."
  start: Int!

  "The (exclusive) character offset at which the inline ends."
  end: Int!

  """
  The target of the link. The link target can either be an external link, in
  which case this field contains a fully qualified HTTP or HTTPS URL, such as
  `https://example.com`. Internal links use the `condict://` pseudo-protocol
  as follows:

  * `condict://language/{id}` links to the start page of a language.
  * `condict://lemma/{id}` links to a lemma.
  * `condict://definition/{id}` links to a definition.
  * `condict://part-of-speech/{id}` links to a part of speech.
  """
  linkTarget: String!

  """
  If the link leads to an item in the dictionary, contains that item. Otherwise,
  this field is null.
  """
  internalLinkTarget: InternalLinkTarget
}

"Contains the item that an internal link points to."
union InternalLinkTarget =
  | LanguageLinkTarget
  | LemmaLinkTarget
  | DefinitionLinkTarget
  | PartOfSpeechLinkTarget

"Contains the language that a language link points to."
type LanguageLinkTarget {
  "The ID of the language that the link points to."
  id: LanguageId!

  """
  The language pointed to by the link. If the language has been removed since
  the link was created, this field is null.
  """
  language: Language
}

"Contains the lemma that a lemma link points to."
type LemmaLinkTarget {
  "The ID of the lemma that the link points to."
  id: LemmaId!

  """
  The lemma pointed to by the link. If the lemma has been removed since the
  link was created, this field is null.
  """
  lemma: Lemma
}

"Contains the definition that a definition link points to."
type DefinitionLinkTarget {
  "The ID of the definition that the link points to."
  id: DefinitionId!

  """
  The definition pointed to by the link. If the definition has been removed
  since the link was created, this field is null.
  """
  definition: Definition
}

"Contains the part of speech that a part of speech link points to."
type PartOfSpeechLinkTarget {
  "The ID of the part of speech that the link points to."
  id: PartOfSpeechId!

  """
  The part of speech pointed to by the link. If the part of speech has been
  removed since the link was created, this field is null.
  """
  partOfSpeech: PartOfSpeech
}

"Input type for a block element."
input BlockElementInput {
  "The block kind."
  kind: BlockKind!

  """
  The indentation level of the element, starting at 0. If omitted, the default
  value of 0 is used.
  """
  level: Int

  "The text content of the block, without inline formatters."
  text: String!

  """
  A list of inlines, which determine how to format the block's text content.
  If there are no inlines, this field is null.
  """
  inlines: [InlineElementInput!]
}

"Input type for an inline element."
input InlineElementInput {
  """
  The inline kind.

  If the inline kind is `LINK`, you must also set `linkTarget`. See that field
  for more details.
  """
  kind: InlineKind!

  "The (inclusive) character offset at which the inline starts."
  start: Int!

  "The (exclusive) character offset at which the inline ends."
  end: Int!

  """
  If the inline is a link, contains the target of the link.

  For details, see `LinkInline.linkTarget`.
  """
  linkTarget: String
}
