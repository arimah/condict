"The kind of a block element."
enum BlockKind {
  "A paragraph of text without any additional meaning."
  PARAGRAPH

  "A first-level heading."
  HEADING_1

  "A second-level heading."
  HEADING_2

  """
  An ordered list item. All consecutive ordered list items on the same level
  belong to the same list.
  """
  OLIST_ITEM

  """
  An unordered list item. All consecutive unordered list items on the same
  level belong to the same list.
  """
  ULIST_ITEM
}

"""
A block element. Block elements make up the top-level nodes of formatted text.
These include paragraphs, headings and list items.
"""
type BlockElement {
  "The block kind."
  kind: BlockKind!

  "The indentation level of the element, starting at 0."
  level: Int!

  """
  A list of inlines, which contain the block's formatted text content as well
  as links.
  """
  inlines: [InlineElement!]!
}

"An inline element, which is either formatted text or a link."
union InlineElement = FormattedText | LinkInline

"""
Formatted text content. These appear as children of block elements, either
directly in the `inlines` list, or indirectly inside links (see `LinkInline`).
"""
type FormattedText {
  "The formatted text."
  text: String!

  "True if the text is bold."
  bold: Boolean!

  "True if the text is italicized."
  italic: Boolean!

  "True if the text is underlined."
  underline: Boolean!

  "True if the text is struck through."
  strikethrough: Boolean!

  """
  True if the text is formatted as subscript characters.

  `subscript` and `superscript` are mutually exclusive.
  """
  subscript: Boolean!

  """
  True if the text is formatted as superscript characters.

  `subscript` and `superscript` are mutually exclusive.
  """
  superscript: Boolean!
}

"""
An inline element that represents a link, either to an item in the dictionary,
or to an arbitrary external URI. Link elements may not contain other links.
"""
type LinkInline {
  """
  The target of the link. The link target can either be an external link, in
  which case this field contains a fully qualified HTTP or HTTPS URL, such as
  `https://example.com`, or an internal links using the pseudo-protocol
  `condict:` as follows:

  * `condict://language/{id}` links to the start page of a language.
  * `condict://lemma/{id}` links to a lemma.
  * `condict://definition/{id}` links to a definition.
  * `condict://part-of-speech/{id}` links to a part of speech.
  """
  linkTarget: String!

  """
  If the link leads to an item in the dictionary, contains that item. Otherwise,
  this field is null.
  """
  internalLinkTarget: InternalLinkTarget

  """
  A list of formatted text parts that make up the link's text. Note that links
  are not permitted here.
  """
  inlines: [FormattedText!]!
}

"Contains the item that an internal link points to."
union InternalLinkTarget =
  | LanguageLinkTarget
  | LemmaLinkTarget
  | DefinitionLinkTarget
  | PartOfSpeechLinkTarget

"Contains the language that a language link points to."
type LanguageLinkTarget {
  "The ID of the language that the link points to."
  id: LanguageId!

  """
  The language pointed to by the link. If the language has been removed since
  the link was created, this field is null.
  """
  language: Language
}

"Contains the lemma that a lemma link points to."
type LemmaLinkTarget {
  "The ID of the lemma that the link points to."
  id: LemmaId!

  """
  The lemma pointed to by the link. If the lemma has been removed since the
  link was created, this field is null.
  """
  lemma: Lemma
}

"Contains the definition that a definition link points to."
type DefinitionLinkTarget {
  "The ID of the definition that the link points to."
  id: DefinitionId!

  """
  The definition pointed to by the link. If the definition has been removed
  since the link was created, this field is null.
  """
  definition: Definition
}

"Contains the part of speech that a part of speech link points to."
type PartOfSpeechLinkTarget {
  "The ID of the part of speech that the link points to."
  id: PartOfSpeechId!

  """
  The part of speech pointed to by the link. If the part of speech has been
  removed since the link was created, this field is null.
  """
  partOfSpeech: PartOfSpeech
}

"Input type for a block element."
input BlockElementInput {
  "The block kind."
  kind: BlockKind!

  """
  The indentation level of the element, starting at 0. If omitted, the default
  value of 0 is used.
  """
  level: Int

  """
  A list of inlines, which contain the block's formatted text content as well
  as links.
  """
  inlines: [InlineElementInput!]!
}

"Input type for an inline element."
input InlineElementInput {
  """
  If set, the inline element is a piece of formatted text, and this field
  contains the text and its associated formatting.

  `text` and `linkTarget` are mutually exclusive.
  """
  text: FormattedTextInput

  """
  If set, the inline element is a link, and this field contains the link target
  and its formatted text content.
  """
  link: LinkInlineInput
}

"Input type for a piece of formatted text."
input FormattedTextInput {
  "The formatted text."
  text: String!

  "If true, the text is bold."
  bold: Boolean

  "If true, the text is italicized."
  italic: Boolean

  "If true, the text is underlined."
  underline: Boolean

  "If true, the text is struck through."
  strikethrough: Boolean

  """
  If true, the text is formatted as subscript characters.

  `subscript` and `superscript` are mutually exclusive.
  """
  subscript: Boolean

  """
  If true, the text is formatted as superscript characters.

  `subscript` and `superscript` are mutually exclusive.
  """
  superscript: Boolean
}

"Input type for a link inline element."
input LinkInlineInput {
  "Contains the target of the link. For details, see `LinkInline.linkTarget`."
  linkTarget: String!

  """
  A list of formatted text parts that make up the link's text. Note that links
  are not permitted here.
  """
  inlines: [FormattedTextInput!]!
}
