"""
An inflection table defines how to inflect words that belong to the table's part
of speech. The table is a true 2-dimensional table, not merely a list of forms.
As such, it can contain any number of rows and columns, and some cells may be
headers. Cells can span multiple rows and columns.

To access the contents of an inflection table, query the `layout` field. Through
it, you can read the table's rows and cells to construct the table, fetch the
inflected forms (see `InflectedForm`) that are contained in the table, as well
as query the definitions that use the table layout.

In addition to the current table layout, inflection tables record some historical
layouts. If the layout is altered while it is in use by one or more definitions,
the previous layout is kept, allowing existing definitions to keep using it. Old
layouts are available through the `oldLayouts` field.

Historical layouts are saved for two reasons:

1. Inflected forms may be added to the dictionary (see `InflectedForm`), and
   recalculating new forms for every definition that uses a table is costly.
2. It is exceedingly difficult for the user to predict the effect of altering
   an inflection table across the entire dictionary, especially if the table is
   used by many definitions.
"""
type InflectionTable {
  "The globally unique ID of the inflection table."
  id: ID!

  "The name of the inflection table, which is only shown in the admin UI."
  name: String!

  """
  Describes the current layout of the inflection table.

  This table may have any number of old layouts that are still in use by one or
  more definitions. These can be accessed through `oldLayouts`.
  """
  layout: InflectionTableLayout!

  """
  Gets old layouts of the inflection table that are still used by at least one
  definition (query through the `InflectionTableLayout.usedByDefinitions` field).
  Old layouts are ordered from oldest to newest.

  Since there may be many old layouts, this field always paginated. If provided,
  `page.perPage` cannot exceed 200.
  """
  oldLayouts(page: PageParams): InflectionTableLayoutConnection!

  "The part of speech that this inflection table belongs to."
  partOfSpeech: PartOfSpeech!

  """
  Indicates whether any version of the inflection table is currently used by any
  definitions.

  To get the definitions that use this table, see the `usedByDefinitions` field.
  """
  isInUse: Boolean!

  """
  Gets the definitions that use any version of this table.

  Definitions are ordered by term first, by ID second. If any definitions belong
  to the same lemma, they will appear in the same relative order as they would
  on the `Lemma.definitions` field.

  Since the table may be used by many definitions, this field always paginated.
  If provided, `page.perPage` cannot exceed 200.
  """
  usedByDefinitions(page: PageParams): DefinitionConnection!
}

"Contains paginated results from the `InflectionTable.oldLayouts` field."
type InflectionTableLayoutConnection {
  "Metadata about the connection, related to pagination."
  meta: ConnectionMeta!

  "The inflection table layouts in this batch."
  nodes: [InflectionTableLayout!]!
}

type InflectionTableLayout {
  "The globally unique ID of this inflection table layout."
  id: ID!

  """
  Indicates whether this layout is the current layout used by the parent
  inflection table.
  """
  isCurrent: Boolean!

  """
  Contains the rows of the inflection table. Each row contains a number of
  cells; each cell is either a header or an inflected form.
  """
  rows: [InflectionTableRow!]!

  """
  All inflected forms contained in the table. To get a form's position in the
  table, you must access the data through `rows`.
  """
  inflectedForms: [InflectedForm!]!

  """
  A list of unique stem names that appear in the inflection patterns of this
  table. The items in the list are unsorted.
  """
  stems: [String!]!

  "The inflection table that this layout belongs to."
  inflectionTable: InflectionTable!

  """
  Indicates whether this layout is used by any definitions.

  To get the definitions that use this table, see the `usedByDefinitions` field.
  """
  isInUse: Boolean!

  """
  Gets the definitions that use this layout.

  Definitions are ordered by term first, by ID second. If any definitions belong
  to the same lemma, they will appear in the same relative order as they would
  on the `Lemma.definitions` field.

  Since the table may be used by many definitions, this field always paginated.
  If provided, `page.perPage` cannot exceed 200.
  """
  usedByDefinitions(page: PageParams): DefinitionConnection!
}

"""
A single row in an inflection table.

This is a record type to allow future extensions without breaking backwards
compatibility.
"""
type InflectionTableRow {
  "Header and data cells of the table."
  cells: [InflectionTableCell!]!
}

"""
A single cell in an inflection table. All inflection table cells have a column
span and a row span, both of which are guaranteed to be greater than zero.
"""
interface InflectionTableCell {
  "The column span of the cell. The value is always greater than 0."
  columnSpan: Int!

  "The row span of the cell. The value is always greater than 0."
  rowSpan: Int!
}

"""
A header cell in an inflection table. Header cells contain only a bit of text,
with no formatting.
"""
type InflectionTableHeaderCell implements InflectionTableCell {
  "The column span of the cell. The value is always greater than 0."
  columnSpan: Int!

  "The row span of the cell. The value is always greater than 0."
  rowSpan: Int!

  "The text displayed in the header cell."
  headerText: String!
}

"""
An cell in an inflection table that contains an inflected form. See the related
type `InflectedForm` for details.
"""
type InflectionTableDataCell implements InflectionTableCell {
  "The column span of the cell. The value is always greater than 0."
  columnSpan: Int!

  "The row span of the cell. The value is always greater than 0."
  rowSpan: Int!

  "The inflected form displayed in the cell."
  inflectedForm: InflectedForm!
}

"""
A single inflected form. Each form belongs to exactly one table.

An inflected form has an _inflection pattern_, which describes how to construct
the form when applied to a word. Inflection patterns contain placeholders inside
curly brackets, such as `{Plural root}`, which are replaced by the definition's
stems. See `Definition.stems` and `DefinitionStem` for more. The placeholder
`{~}` always refers to the definition's lemma form.

In addition to this, the `deriveLemma` field determines whether the inflected
form, once computed for a word, is added to the dictionary as its own lemma.
This enables the dictionary to list e.g. "birds" as the plural of "bird". This
feature can be disabled or enabled for each individual form.

Finally, every inflected form has a name. Usually inflected form names are
derived from the inflection table's header cells, but the user can also enter
a custom name. The `hasCustomDisplayName` field indicates whether the name was
derived automatically. The display name is used for derived definitions, so the
dictionary can show "birds" as the _plural_ of "bird", not merely a generic
_inflected form of_.
"""
type InflectedForm {
  "The globally unique ID of the inflected form."
  id: ID!

  "Whether the inflected form is automatically added to the dictionary."
  deriveLemma: Boolean!

  "A pattern, such as '{~}s', which describes how to construct the inflected form."
  inflectionPattern: String!

  "The display name of the inflected form."
  displayName: String!

  """
  If true, `displayName` is a custom, user-entered name, as opposed to being
  derived automatically from header cells in the parent `inflectionTable`.

  Note that the display name is stored pre-computed regardless of this setting;
  the server does not compute automatic display names for each request.
  """
  hasCustomDisplayName: Boolean!

  "The table layout that this form belongs to."
  inflectionTableLayout: InflectionTableLayout!
}

extend type Query {
  "Finds an inflection table by ID."
  inflectionTable(id: ID!): InflectionTable

  "Finds an inflection table layout by ID."
  inflectionTableLayout(id: ID!): InflectionTableLayout

  "Finds an inflected form by ID."
  inflectedForm(id: ID!): InflectedForm
}

"Input type for a new inflection table."
input NewInflectionTableInput {
  "The part of speech that the inflection table will be added to."
  partOfSpeechId: ID!

  "The name of the inflection table."
  name: String!

  """
  Describes the layout of the inflection table. Each row contains a number of
  cells; each cell is either a header or an inflected form.
  """
  layout: [InflectionTableRowInput!]!
}

"""
Input type for editing an existing inflection table. It is not possible to move
an inflection table to another part of speech.
"""
input EditInflectionTableInput {
  "If set, renames the inflection table."
  name: String

  """
  If set, updates the layout of the inflection table.

  It is not possible to change this setting on a table that is used by one or
  more definitions.
  """
  layout: [InflectionTableRowInput!]
}

"""
Input type for an inflection table row. This type is used for both new and
existing tables.
"""
input InflectionTableRowInput {
  "Header and data cells of the table."
  cells: [InflectionTableCellInput]!
}

"""
Input type for an inflection table cell. This type combines header cells and
inflected forms, and is used for both new and existing tables.
"""
input InflectionTableCellInput {
  """
  The column span of the cell. The value must be greater than 0. If omitted,
  defaults to 1.
  """
  columnSpan: Int

  """
  The row span of the cell. The value must be greater than 0. If omitted,
  defaults to 1.
  """
  rowSpan: Int

  """
  The text displayed in the header cell. If this field is set, the cell is a
  header.
  """
  headerText: String

  """
  The inflected form displayed in the cell. If this field is set, the cell is
  a data cell. In a new table, the cell's `id` property is ignored.
  """
  inflectedForm: InflectedFormInput
}

"""
Input type for an inflected form. This type is used for both new and existing
forms.
"""
input InflectedFormInput {
  """
  The ID of the inflected form. In a new table, this property is ignored. When
  editing an existing table, if set, it will update an existing form.
  """
  id: ID

  "Whether the inflected form is automatically added to the dictionary."
  deriveLemma: Boolean!

  """
  A pattern, such as `{~}s`, which describes how to construct the inflected
  form.
  """
  inflectionPattern: String!

  "The display name of the inflected form."
  displayName: String!

  """
  Determines whether the display name was entered specifically by the user. If
  false, the display name was derived automatically from the header cells in
  the containing table.

  Note that `displayName` must be set regardless of the value of this field.
  The server does not compute any display names.
  """
  hasCustomDisplayName: Boolean!
}

extend type Mutation {
  """
  Adds an inflection table.

  Requires authentication.
  """
  addInflectionTable(data: NewInflectionTableInput!): InflectionTable!

  """
  Edits an inflection table. It is not possible to change `layout` on a table
  that is used by one or more definitions.

  Requires authentication.
  """
  editInflectionTable(id: ID!, data: EditInflectionTableInput!): InflectionTable!

  """
  Deletes an inflection table. It is not possible to delete a table that is used
  by one or more definitions.

  Requires authentication.
  """
  deleteInflectionTable(id: ID!): Boolean!
}
